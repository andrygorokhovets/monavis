- $woo = 'woocommerce';
- if(sizeof(WC()->session->get( 'wc_notices', array())) > 0):
.col-md-12.cart-alert
    .alert.alert-info.alert-dismissible.fade.in(role="alert")
        button.close(type="button", data-dismiss="alert", aria-label="Close")
            span(aria-hidden="true") Ã—
        - wc_print_notices();
- endif;

- do_action( 'woocommerce_before_cart' );
form.cart-form(action!='<?php print esc_url( WC()->cart->get_cart_url() ); ?>', method='post')
    .col-md-12
        - do_action( 'woocommerce_before_cart_table' );
        table.shop_table.cart.table.table-hover
            thead
                tr
                    th.product-remove
                        |&nbsp;
                    th.product-thumbnail
                        |&nbsp;
                    th.product-name
                        - _e('Product', $woo);
                    th.product-price
                        - _e('Price', $woo);
                    th.product-quantity
                        - _e('Quantity', $woo);
                    th.product-subtotal
                        - _e('Total', $woo);
            tbody
                - do_action( 'woocommerce_before_cart_contents' );
                - foreach ( WC()->cart->get_cart() as $cart_item_key => $cart_item ):
                - $_product = apply_filters( 'woocommerce_cart_item_product', $cart_item['data'], $cart_item, $cart_item_key );
                - $product_id   = apply_filters( 'woocommerce_cart_item_product_id', $cart_item['product_id'], $cart_item, $cart_item_key );
                - if ( $_product && $_product->exists() && $cart_item['quantity'] > 0 && apply_filters( 'woocommerce_cart_item_visible', true, $cart_item, $cart_item_key ) );
                tr(class!='<?php print( apply_filters( "woocommerce_cart_item_class", "cart_item", $cart_item, $cart_item_key ) ); ?>')
                    td.product-remove
                        - print apply_filters( 'woocommerce_cart_item_remove_link', sprintf( '<a href="%s" class="remove btn btn-danger" title="%s"><i class="fa fa-times"></i></a>', esc_url( WC()->cart->get_remove_url( $cart_item_key ) ), __( 'Remove this item', $woo ) ), $cart_item_key );
                    td.product-thumbnail
                        - $thumbnail = apply_filters( 'woocommerce_cart_item_thumbnail', $_product->get_image(), $cart_item, $cart_item_key );
                        - if ( ! $_product->is_visible() ):
                        - else:
                        - $image_id = $_product->get_image_id();
                        - if(!empty($image_id)):
                        - $image_src = getImage('articles', '100x80', $image_id);
                        a(href!='esc_url( $_product->get_permalink( $cart_item ) );')
                            img.img-responsive(src!="<?php print($image_src); ?>", alt!="<?php print($_product->get_title()); ?>")
                        - endif;
                        //- printf( '<a href="%s">%s</a>', esc_url( $_product->get_permalink( $cart_item ) ), $_product->get_image() );
                        - endif;
                    td.product-name
                        - if ( ! $_product->is_visible() ):
                        - print apply_filters( 'woocommerce_cart_item_name', $_product->get_title(), $cart_item, $cart_item_key ) . '&nbsp;';
                        - else:
                        - print apply_filters( 'woocommerce_cart_item_name', sprintf( '<a href="%s">%s </a>', esc_url( $_product->get_permalink( $cart_item ) ), $_product->get_title() ), $cart_item, $cart_item_key );
                        - endif;

                        - print WC()->cart->get_item_data( $cart_item );

                        - if ( $_product->backorders_require_notification() && $_product->is_on_backorder( $cart_item['quantity'] ) ):
                        - print '<p class="backorder_notification">' . esc_html__( 'Available on backorder', $woo ) . '</p>';
                        - endif;
                    td.product-price
                        - print apply_filters( 'woocommerce_cart_item_price', WC()->cart->get_product_price( $_product ), $cart_item, $cart_item_key );
                    td.product-quantity
                        - if ( $_product->is_sold_individually() ):
                        - $product_quantity = sprintf( '1 <input type="hidden" name="cart[%s][qty]" value="1" />', $cart_item_key );
                        - else:
                        .input-group
                            span.input-group-btn
                                button.btn.btn-danger.btn-number(type='button', data-type='minus', data-field!="<?php print('cart['.$cart_item_key.'][qty]'); ?>")
                                    span.glyphicon.glyphicon-minus
                            - $product_quantity = woocommerce_quantity_input( array( 'input_name'  => "cart[{$cart_item_key}][qty]", 'input_value' => $cart_item['quantity'], 'max_value'   => $_product->backorders_allowed() ? '' : $_product->get_stock_quantity(), 'min_value'   => '0'), $_product, false );
                            - print apply_filters( 'woocommerce_cart_item_quantity', $product_quantity, $cart_item_key );
                            span.input-group-btn
                                button.btn.btn-success.btn-number(type='button', data-type='plus', data-field!="<?php print('cart['.$cart_item_key.'][qty]'); ?>")
                                    span.glyphicon.glyphicon-plus
                        - endif;
                    td.product-subtotal
                        - print apply_filters( 'woocommerce_cart_item_subtotal', WC()->cart->get_product_subtotal( $_product, $cart_item['quantity'] ), $cart_item, $cart_item_key );

                - do_action( 'woocommerce_cart_contents' );
                - endforeach;
    .col-md-12
        .row
            - if ( WC()->cart->coupons_enabled() ):
            .col-md-9.coupon
                .input-group
                    label.input-group-addon(for='coupon_code')
                        -_e( 'Coupon', 'woocommerce' );
                    input.input-text.form-control#coupon_code(type='text', name='coupon_code', value='', placeholder!='<?php _e( "Coupon code", $woo ); ?>')
                    span.input-group-btn
                        input.button.btn.btn-info(type='submit', name='apply_coupon', value!='<?php _e( "Apply Coupon", $woo); ?>')
                        - do_action( 'woocommerce_cart_coupon' );
            - endif;
            .col-md-3
                .btn-container
                    input.button.update-btn.btn.btn-info(type='submit', name='update_cart', value!='<?php _e( "Update Cart", $woo ); ?>')
                    - do_action( 'woocommerce_cart_actions' );
                    - wp_nonce_field( 'woocommerce-cart' );
    - do_action( 'woocommerce_after_cart_contents' );
    - do_action( 'woocommerce_after_cart_table' );

.col-md-12.cart-bottom
    .cart-collaterals
        - do_action( 'woocommerce_cart_collaterals' );


- do_action( 'woocommerce_after_cart' );












